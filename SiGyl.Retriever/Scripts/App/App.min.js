(function(){requirejs.config({baseUrl:"../scripts",paths:{linq:"linqjs-amd",sinon:"sinon-1.9.1",q:"q",retriever:"app/retriever"}});require(["linq","retriever","q","sinon"],function(a,c,b){QUnit.test("check linq",function(d){return d.ok(a,"linq installed")});QUnit.test("check sinon",function(d){return d.ok(sinon,"sinon installed")});QUnit.test("handles change and delete data callbacks from source",sinon.test(function(d){var e,f,g,h;g={on:sinon.spy()};h={changeData:sinon.stub().returns("stored data"),deleteData:sinon.stub().returns("deleted data")};e={addData:sinon.spy(),deleteData:sinon.spy(),cycle:sinon.spy()};f=new c(g,h,e);d.ok(g.on.calledTwice,"source on change and delete");a.From(g.on.args).Single(function(i){return i[0]==="change"})[1]("id","type","data");d.ok(h.changeData.calledOnce,"store change data called");d.ok(h.changeData.args[0][0]==="id"&&h.changeData.args[0][1]==="type"&&h.changeData.args[0][2]==="data","correct data stored");d.ok(e.addData.calledOnce,"listener add data");d.ok(e.addData.args[0][0]===f);d.ok(e.addData.args[0][1]==="stored data");d.ok(e.cycle.calledOnce);a.From(g.on.args).Single(function(i){return i[0]==="delete"})[1]("id","type","data");d.ok(h.deleteData.calledOnce,"store delete data called");d.ok(h.deleteData.args[0][0]==="id"&&h.deleteData.args[0][1]==="type"&&h.deleteData.args[0][2]==="data","correct data delete");d.ok(e.deleteData.calledOnce,"listener delete data");d.ok(e.deleteData.args[0][0]===f);d.ok(e.deleteData.args[0][1]==="deleted data");return d.ok(e.cycle.calledTwice)}));QUnit.asyncTest("if no tokens require fetching source join is not called",sinon.test(function(d){var e,f,g,h,i;f={done:this.spy(),"catch":this.spy(),"finally":this.spy()};h={on:function(){},invoke:sinon.stub().returns(f)};i={mergeData:sinon.stub().returns("ok!!")};g=new c(h,i,"listener");e=g.retrieve(["token","token"]);d.ok(h.invoke.calledOnce,"source invoke not called");d.equal(h.invoke.args[0][0],"join","source  join");d.equal(h.invoke.args[0][2].length,0,"no joins");d.equal(h.invoke.args[0][3].length,0,"no collection joins");f.done.args[0][0]("result!");return e.done(function(j){d.equal(i.mergeData.args[0][0],"result!","data merged");d.equal(j,"ok!!");return QUnit.start()})}));QUnit.asyncTest("source join fails result",sinon.test(function(d){var e,f,g,h,i;this.clock.restore();f={done:this.spy(),"catch":this.spy()};h={on:function(){},invoke:sinon.stub().returns(f)};i={mergeData:sinon.stub().returns("ok!!")};g=new c(h,i,"listener");e=g.retrieve([]);e["catch"](function(){d.ok(!i.mergeData.called,"no data merged");return QUnit.start()});return setTimeout(function(){return f["catch"].args[0][0]("failed")},100)}));QUnit.test("joins called",sinon.test(function(d){var e,f,g,h;f={done:this.spy(),"catch":this.spy()};h={on:function(){},invoke:sinon.stub().returns(f)};g=new c(h,"store","listener");e=g.retrieve([{retrieveRequestMerge:function(){return"join1:"},collectionRetrieveRequestMerge:function(){return"collectionjoin1:"}},{retrieveRequestMerge:function(i){return i+"join2"},collectionRetrieveRequestMerge:function(i){return i+"collectionjoin2"}}]);d.ok(h.invoke.calledOnce,"source invoke not called");d.equal(h.invoke.args[0][0],"join","source  join");d.equal(h.invoke.args[0][2],"join1:join2","no joins");return d.equal(h.invoke.args[0][3],"collectionjoin1:collectionjoin2","no collection joins")}));QUnit.asyncTest("unlistens called",sinon.test(function(d){var e,f,g,h;f={done:this.spy(),"catch":this.spy(),"finally":this.spy()};h={on:function(){},invoke:sinon.stub().returns(f)};g=new c(h,"store","listener");e=g.unlisten("unlistens","collectionUnlistens");d.ok(h.invoke.calledOnce,"source invoke not called");d.equal(h.invoke.args[0][0],"leave","source  leave");d.equal(h.invoke.args[0][1],"unlistens","unlistens");d.equal(h.invoke.args[0][2],"collectionUnlistens","collectionUnlistens");f.done.args[0][0]("ok");return e.done(function(i){d.equal(i,"ok");return QUnit.start()})}));return QUnit.asyncTest("unlistens called with fail",sinon.test(function(d){var e,f,g,h;f={done:this.spy(),"catch":this.spy(),"finally":this.spy()};h={on:function(){},invoke:sinon.stub().returns(f)};g=new c(h,"store","listener");e=g.unlisten("unlistens","collectionUnlistens");f["catch"].args[0][0]("nok");return e["catch"](function(i){d.equal(i,"nok");return QUnit.start()})}))})}).call(this);