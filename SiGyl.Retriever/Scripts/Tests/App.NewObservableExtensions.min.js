(function(){requirejs.config({baseUrl:"../scripts",map:{"*":{ko:"knockout"}},shim:{breeze:["Q","jquery","knockout"],sinonie:["sinon"],sigr:["jquery"]},paths:{rx:"rx/rx","rx.joinpatterns":"rx/rx.joinpatterns","rx.binding":"rx/rx.binding","knockout.rx":"sigyl.knockout.rx",linq:"linqjs-amd",sinon:"sinon-1.10.3",sinonie:"sinon-ie-1.10.3",Q:"q",jquery:"jquery-2.1.1",sigr:"jquery.signalR-2.1.2",retriever:"app/retriever",breeze:"breeze.debug",knockout:"knockout-3.2.0.debug","knockout.mapping":"knockout.mapping-latest","knockout.punches":"knockout.punches",breezeretriever:"App/BreezeRetriever",breezeEntityManagers:"App/BreezeEntityManagers",store:"App/store",b64:"App/b64",listener:"App/Listener",listenToken:"App/listenToken",source:"App/Source",observableExtensions:"app/NewobservableExtensions/observableExtensions",configurationMetaData:"Tests/metadata/configuration",runtimeMetaData:"Tests/metadata/runtime",historyMetaData:"Tests/metadata/history",utils:"App/utils","observableExtensions.listener":"App/ObservableExtensions/listener"}});require(["rx.binding","Q","linq","knockout","observableExtensions","retriever","breezeEntityManagers","knockout.punches","sinon","sinonie"],function(j,g,e,d,f,a,b){var c,i,h;i={};h={subscriber:function(l){var k;if(!i[l]){k=j.Observable.create(function(m){i[l].observer=m;return function(){return delete i[l]}});i[l]={subject:k,share:k.share(),subscriptionDeferred:g.defer()};setTimeout(function(){if(i[l]){return i[l].subscriptionDeferred.resolve(function(){return i[l].share})}},1)}return i[l].subscriptionDeferred.promise}};sinon.stub(a,"initMe",function(){return g()});sinon.stub(a,"getMe",function(){return h});sinon.stub(b,"getMe",function(){return g({getType:function(){return{executeQuery:c.executeQuery}}})});c={executeQuery:function(l){var k;k=g.defer();setTimeout(function(){return k.resolve({results:["retrieve returns data for "+l]})},10);return k.promise}};d.punches.enableAll();QUnit.asyncTest("subscribe and fetch",function(k){var l,m,n,o;o=sinon.sandbox.create();l=o.useFakeTimers();m=[];n=0;o.spy(h,"subscriber");o.spy(c,"executeQuery");f.initMe().then(function(){var p;p=f.getMe().testManyObservable("rsub")().root.base("base!!!").order("order!!!!!!!!").retrieve().retrieved().subscribe(function(q){return m=q});k.ok(m.length===0,"no data received yet");k.ok(h.subscriber.calledOnce,"we have subscribed to the retriever");k.equal(h.subscriber.args[0][0],"rsub","we've subscribed to the rsub definition");k.ok(!c.executeQuery.called,"we have not yet retrieved from the retriever");l.tick(1);l.restore();setTimeout(function(){l=o.useFakeTimers();k.ok(c.executeQuery.calledOnce,"we have called retrieve on the retriever");k.equal(c.executeQuery.args[0][0],"initialQuery from base base!!! from order order!!!!!!!!","query passed to retriever");k.ok(m.length===0,"still no data");l.tick(20);i.rsub.observer.onNext("yabba 1");i.rsub.observer.onNext("yabba 2");l.restore();return setTimeout(function(){l=o.useFakeTimers();k.ok(m.length===3,"data");k.ok(m[0]==="retrieve returns data for initialQuery from base base!!! from order order!!!!!!!!","received data applied");k.ok(m[1]==="yabba 1","published data applied");k.ok(m[2]==="yabba 2","published data applied");o.restore();return QUnit.start()},20)},1);return;return setTimeout(function(){i.rsub.observer.onNext("yabadabadaba");subscription2.dispose();i.rsub.observer.onNext("yabfevadabadaba");p.dispose();k.ok(m===3);k.ok(n===2);k.ok(i.rsub===void 0);return QUnit.start()},1000)});return l.tick(4)});return QUnit.asyncTest("bind to dom",function(k){return f.initMe().then(function(){var l;l=0;setInterval(function(){if(i.rsub&&i.rsub.observer){return i.rsub.observer.onNext("yabadabadaba "+(l++))}},1000);return d.applyBindings({base1:d.observable("base1"),base2:d.observable("base2"),order1:d.observable("order1"),order2:d.observable("order2"),sub1:f.getMe().testManyObservable("rsub"),sub2:f.getMe().testManyObservable("rsub")})})})})}).call(this);