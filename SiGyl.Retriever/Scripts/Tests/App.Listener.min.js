(function(){var a;requirejs.config({baseUrl:"../scripts",map:{"*":{ko:"knockout"}},shim:{sinonie:["sinon"]},paths:{linq:"linqjs-amd",sinon:"sinon-1.10.3",sinonie:"sinon-ie-1.10.3",Q:"q",jquery:"jquery-2.1.1",knockout:"knockout-3.2.0.debug",listener:"App/Listener",utils:"App/utils"}});a={getUnlistens:function(){}};define("listenToken",[],function(){return{getMe:function(){return a}}});require(["linq","Q","listener","sinon","sinonie"],function(b,d,c){QUnit.asyncTest("listen to a token should retrieve it and merge it",sinon.test(function(e){var f,g,h;this.clock.restore();c.initMe();h=c.getMe();h.unlistening()[1]="unlisten";g=void 0;a={key:1,dataMerge:this.spy(),dataReceived:this.stub().returns(1),retriever:{retrieve:this.stub().returns((f=d.defer()).promise)}};h.listen(a);e.ok(!(1 in h.unlistening()),"unlistening deleted");e.ok(!(1 in h.listening()),"no listening");e.ok(!(1 in h.cycled()),"no cycled");e.ok(!(1 in h.completed()),"no completed");e.ok(h.cycling()[1]===a,"listening to listenToken");e.ok(a.retriever.retrieve.args[0][0][0]===a,"listen token passed to retriever");f.resolve("retrieveData");return setTimeout(function(){e.ok(!(1 in h.unlistening()),"unlistening deleted");e.ok(!(1 in h.listening()),"no listening");e.ok(!(1 in h.cycling()),"no cycling");e.ok(!(1 in h.completed()),"no completed");e.ok(h.cycled()[1]===a,"listentoken cycled");e.ok(a.dataMerge.args[0][0]==="retrieveData");e.ok(a.dataReceived.args[1][0]===2,"data received incremented");return QUnit.start()},100)}));return QUnit.asyncTest("listen to multiple tokens should retrieve them and merge them",sinon.test(function(e){var f,g,h,i,j,k,l;this.clock.restore();c.initMe();l=c.getMe();i=void 0;j={retrieve:this.stub().returns((g=d.defer()).promise)};k={retrieve:this.stub().returns((h=d.defer()).promise)};a={key:1,dataMerge:this.spy(),dataReceived:this.stub().returns(1),retriever:j};f={key:2,dataMerge:this.spy(),dataReceived:this.stub().returns(2),retriever:k};l.listen(a);e.ok(j.retrieve.args[0][0][0]===a,"listen token passed to retriever");l.listen(f);e.ok(k.retrieve.args[0][0].length===0,"no second listen yet");g.resolve("retrieveData");return setTimeout(function(){e.ok(a.dataMerge.args[0][0]==="retrieveData");e.ok(a.dataReceived.args[1][0]===2,"data received incremented");h.resolve("retrieveData1");return setTimeout(function(){e.ok(f.dataMerge.args[0][0]==="retrieveData1");e.ok(f.dataReceived.args[1][0]===3,"data received incremented");return QUnit.start()},100)},100)}))})}).call(this);